#! /bin/bash

# This file is part of Kaya.
#
# Kaya is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kaya is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kaya.  If not, see <https://www.gnu.org/licenses/>.
#
# Copyright 2021 Andrew Engelbrecht
#

if ! test "$BASH_VERSION"; then echo "error: shell is not bash" >&2; exit 1; fi
shopt -s inherit_errexit 2>/dev/null ||: # ignore fail in bash < 4.4
set -eE -o pipefail
trap 'echo "kaya: backup failed" >&2' ERR


kaya_protocol_version=2

kaya-usage() {
    cat << EOF >&2

kaya usage:
kaya [-c CONFIG_PATH] [-u REMOTE_USER] HOST_TO_BACKUP backup -- RESTIC_ARGS

REMOTE_USER          Default is root
CONFIG_PATH          Default is /etc/kaya.conf
HOST_TO_BACKUP       For example www1.example.com
RESTIC_ARGS          See possible args by running "restic backup --help"
EOF
    exit "$1"
}

set-defaults() {
    global_conf="/etc/kaya.conf"
    remote_user="root"
}

get-params() {
    local -a positional
    local key
    while (( $# )); do
        key="$1"

        case $key in
            -c|--conf)
                global_conf="$2"
                shift 2
                ;;
            -u|--user)
                remote_user="$2"
                shift 2
                ;;
            --)
                shift
                backup_options=("$@")
                break
                ;;
            -*)
                echo "kaya: error: unrecognized argument: $key" >&2
                kaya-usage 1
                ;;
            *)
                positional+=("$key")
                shift
                ;;
        esac
    done

    set -- "${positional[@]}"

    hostname="$1"
    action="$2"

    if [[ -z $hostname ]]; then
        echo "kaya: error: missing hostname argument" >&2
        kaya-usage 1
    fi

    case $action in
        backup)
            # currently the only option is to backup
            true
            ;;
        *)
            echo "kaya: error: invalid action argument: $action" >&2
            kaya-usage 1
            ;;
    esac
}

## create restic backup repo, store the new password in plaintext
create-backup-dir() {
    echo "kaya: Creating backup directory..."

    mkdir -p "${backup_dir}"; chmod 700 "${backup_dir}"
    touch "${password_file}"; chmod 600 "${password_file}"; pwgen 30 1 > "${password_file}"; chmod 400 "${password_file}"

    RESTIC_PASSWORD="$(cat "${password_file}")" restic -r "${backup_dir}" init > /dev/null
}

# check / create the hashed password in .htpasswd
update-htpasswd-file() {
    if [[ ! -e $htpasswd_file ]] ; then
        touch "${htpasswd_file}"
    fi
    chmod 600 "${htpasswd_file}"

    # check to see if the password is already there and correct
    # otherwise, update it
    if ! grep -q "^${hostname}" "${htpasswd_file}" || ! htpasswd -i -v "${htpasswd_file}" "${hostname}" < "${password_file}" &> /dev/null ; then

        flock -w 10 "${htpasswd_file}.flock" -c "htpasswd -i -B '${htpasswd_file}' '${hostname}'" < "${password_file}" \
            |& { grep -E -v "(Adding|Updating) password for user" >&2 ||:; }

        echo "kaya: Waiting for rest-server to reload .htpasswd... (mostly for new backups)"
        sleep 32
    fi
}

start-backup() {
    echo "kaya: Starting backup of ${hostname}"
    echo

    local password
    password="$(head -n1 "${password_file}")"

    log_dump="$(mktemp)"
    trap 'rm -f ${log_dump}' EXIT

    # make the backup over a forwarded port
    cat << EOF | ssh -o PasswordAuthentication=no -R "${remote_port}:localhost:${local_port}" \
                     "${remote_user}@${hostname}" kaya-client \
                     "${remote_port@Q}" "${hostname@Q}" "${backup_options[@]@Q}" \
        | tee "${log_dump}" | { grep -v "KAYA_SUCCESSFUL_BACKUP_MESSAGE" ||:; }
${kaya_protocol_version}
${password}
EOF

    # confirm that the SSH session completed (ssh client often exits 0, even if it's killed)
    if ! tail -1 "${log_dump}" | grep -q -E -e "^KAYA_SUCCESSFUL_BACKUP_MESSAGE" -e "^kaya-client: command exit code" ; then
        echo "kaya: backup interrupted or failed to complete" >&2
        exit 1
    fi
}

main() {
    local program
    local missing_prog
    missing_prog=false
    for program in flock pwgen; do
        if ! type -p $program &>/dev/null; then
            echo "kaya: error: install $program (package $program on debian based systems)" >&2
            missing_prog=true
        fi
    done
    if ! type -p htpasswd &>/dev/null; then
        echo "kaya: error: install htpasswd (package apache2-utils on debian based systems)" >&2
        missing_prog=true
    fi
    if $missing_prog; then
        exit 1
    fi
    set-defaults
    get-params "$@"

    # shellcheck source=/etc/kaya.conf
    source "${global_conf}"

    if [[ -z $backup_root ]]; then
        echo "kaya: error: no backup_root variable set in ${global_conf}" >&2
        exit 1
    fi
    if [[ -z $local_port ]]; then
        local_port=8000
    fi
    if [[ -z $remote_port ]]; then
        remote_port=8777
    fi

    backup_dir="${backup_root}/${hostname}"
    password_file="${backup_dir}/repo-password-keep"
    htpasswd_file="${backup_root}/.htpasswd"

    if [[ ! -d $backup_dir ]]; then
        create-backup-dir
    fi

    if [[ ! -e $password_file ]]; then
        echo "kaya: error: the repo password file is missing:" >&2
        echo "${password_file}" >&2
        exit 1
    fi

    update-htpasswd-file

    if ! lsof -Pi ":${local_port}" -sTCP:LISTEN -t > /dev/null ; then
        echo "kaya: error: rest-server is not listening on port ${local_port}" >&2
        echo "kaya: error: start rest-server or update ${global_conf}" >&2
        exit 1
    fi

    if [[ $action == backup ]]; then
        start-backup
    fi
}

main "$@"

# Local Variables:
# sh-basic-offset: 4
# End:
